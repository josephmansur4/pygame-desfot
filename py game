# -*- coding: utf-8 -*-

import pygame
import random
from os import path

# Configuração inicial
pygame.init()
WIDTH, HEIGHT = 1024, 768
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Exemplo de Fundo em Movimento')

# Cores
BLACK = (0, 0, 0)

# Constantes do jogo
GRAVITY = 0.8
JUMP_SIZE = 15
GROUND = HEIGHT - 100
FPS = 60
PLAYER_START_POS = WIDTH // 4
INITIAL_FREE_ZONE = PLAYER_START_POS + 200  # Zona livre inicial para evitar árvores no começo

# Carrega os assets
img_dir = '/Users/jm/Downloads'
raposa_img = pygame.image.load(path.join(img_dir, 'foto insper.jpeg')).convert_alpha()
raposa_img = pygame.transform.scale(raposa_img, (120, 80))  # Tamanho da raposa
arvore_img = pygame.image.load(path.join(img_dir, 'foto arvore.jpeg')).convert_alpha()
arvore_img = pygame.transform.scale(arvore_img, (100, 200))  # Tamanho da árvore

# Classes do jogo
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = raposa_img
        self.rect = self.image.get_rect(center=(PLAYER_START_POS, HEIGHT - 50))
        self.speedy = 0
        self.jump_count = 0

    def update(self):
        self.speedy += GRAVITY
        self.rect.y += self.speedy
        if self.rect.bottom > GROUND:
            self.rect.bottom = GROUND
            self.speedy = 0
            self.jump_count = 0  # Reset jump count on landing

    def jump(self):
        if self.jump_count < 2:  # Allows for double jumping
            self.speedy = -JUMP_SIZE
            self.jump_count += 1

class Tree(pygame.sprite.Sprite):
    def __init__(self, x, is_top):
        super().__init__()
        self.image = arvore_img
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = 0 if is_top else HEIGHT - self.rect.height
        self.speedx = -5

    def update(self):
        self.rect.x += self.speedx
        if self.rect.right < 0:
            self.kill()

# Função principal do jogo
def game_screen(screen):
    all_sprites = pygame.sprite.Group()
    trees = pygame.sprite.Group()
    player = Player()
    all_sprites.add(player)

    # Gerar árvores com espaçamento inicial
    for _ in range(10):
        x = random.randint(INITIAL_FREE_ZONE, WIDTH)
        is_top = random.choice([True, False])
        tree = Tree(x, is_top)
        trees.add(tree)
        all_sprites.add(tree)

    clock = pygame.time.Clock()
    running = True

    while running:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    player.jump()

        all_sprites.update()
        if pygame.sprite.spritecollide(player, trees, False):
            print("Colisão detectada! Jogo terminado.")
            running = False

        screen.fill(BLACK)  # Fundo preto
        all_sprites.draw(screen)
        pygame.display.flip()

    pygame.quit()

game_screen(screen)
